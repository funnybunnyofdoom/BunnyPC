--This program monitors the reactor
reactor = peripheral.wrap(nuke.get())

function main()
  --x = ''
  --while x ~= 'exit' do
    --x = exit()
  --end
  while true do
    display(2,2)
    --parallel.waitForAny(powerBar(2,2),display(2,2))
    powerBar(2,2)
    os.sleep(0.5)
  end
end

function getStats()
  local active = reactor.isActive()
  local heat = reactor.getHeat()
  local maxHeat = reactor.getMaxHeat()
  local euOutput = reactor.getEUOutput()
  return active, heat, maxHeat, euOutput
end

function display(X,Y)
  local active,heat,maxHeat,euOutput = getStats()
  --myWindow = window.create(term.current(),X,Y,9,9)
  local monitor = peripheral.wrap('monitor_0')
  myWindow = window.create(monitor,X,Y,9,9)
  myWindow.setBackgroundColor(colors.white )
  myWindow.clear()
  smallWindow = window.create(myWindow,2,2,7,7)
  smallWindow.setBackgroundColor(colors.blue)
  smallWindow.clear()
  term.setCursorPos(1,1)
  
  smallWindow.setCursorPos(1,1)
  if active == true then
    smallWindow.setTextColor(colors.green)
    smallWindow.write('  ON')
  else
    smallWindow.setTextColor(colors.red)
    smallWindow.write('  OFF')
  end
  smallWindow.setTextColor(colors.white)
  smallWindow.setCursorPos(1,2)
  smallWindow.write('  '..heat)
  smallWindow.setCursorPos(1,3)
  smallWindow.write(' '..maxHeat)
  smallWindow.setCursorPos(1,4)
  smallWindow.write('    '..euOutput)
  --coroutine.yield()

end

function red()
  subBar.setBackgroundColor(colors.red)
  subBar.write(' ')
  subBar.setBackgroundColor(colors.black)
end

function powerBar(xx,yy)
  local active, heat, maxHeat, euOutput = getStats()
  local monitor = peripheral.wrap('monitor_0')
  local win = window.create(monitor,2,13,16,6)
  win.setBackgroundColor(colors.white)
  win.clear()
  subBar = window.create(win,3,3,12,3)
  subBar.setBackgroundColor(colors.lightGray)
  subBar.clear()
  subBar.setCursorPos(2,2)
  
  --function red()
    --subBar.setBackgroundColor(colors.red)
    --subBar.write(' ')
    --subBar.setBackgroundColor(colors.black)
  --end
  
  --while true do
    --os.sleep(0.1)
    if heat < 1000 then
      subBar.clear()
    elseif heat > 999 and heat < 2000 then
      subBar.setCursorPos(2,2)
      red()      
    elseif heat > 1999 and heat < 3000 then
      subBar.setCursorPos(2,2)
      red()
      red()
    elseif heat > 2999 and heat < 4000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
    elseif heat > 3999 and heat < 5000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
    elseif heat > 4999 and heat < 6000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
    elseif heat > 5999 and heat < 7000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
      red()
    elseif heat > 6999 and heat < 8000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
      red()
      red()
    elseif heat > 7999 and heat < 9000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()
    elseif heat > 8999 and heat < 10000 then
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()
    else
      subBar.setCursorPos(2,2)
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()
      red()    
    end
  --coroutine.yield()
  --end
end

function exit()
  local event, button, xPos, yPos = os.pullEvent("mouse_click")
  if xPos == 10 and yPos == 2 then
    term.setCursorPos(1,1)
    return 'exit'
  else
    return ' '
  end
end

main()
term.setCursorPos(1,1)
term.setTextColor(colors.white)
